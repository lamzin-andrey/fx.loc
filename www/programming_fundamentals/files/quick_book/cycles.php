<header>
	<h3>Циклы</h3>
</header>
<h4>Использование for </h4>
<p>Составить программу для проверки утверждения: «Результатами вычислений по формуле х<sup>2</sup> + х + 41  при 0 <= х <= 40 являются простые числа. Все результаты вывести на экран.</p>
<p>Если не знаем, что такое простые числа, открываем поисковую систему yandex или google и пишем эти два слова. Находится также легко как и все остальное.</p>
<p>Если знаем, то вспоминаем, что это число которое делится без остатка только на 1 и на само себя.</p>
<p>Для организации цикла можно использовать операторы <b>for</b> или <b>while</b></p>
<pre>
<b>function</b> checkSimpleNumber() {
	<b>var</b> s = <span class="strcolor">''</span>, x = 0, n, j, ctrl1, ctrl2;
	<b>for</b> (x; x <= 40; x = x + 1) {
		n = x*x + x + 41;
		<b>for</b> (j = 2; j < n; j++) {
			ctrl1 = n / j;
			ctrl2 = <b>Math</b>.<i title="Округление вниз, то есть floor(3.9) вернет 3">floor</i>(ctrl1);
			<b>if</b> (ctrl1 == ctrl2) {
				<u>writeln</u>(<span class="strcolor">"При x = "</span> + x + <span class="strcolor">" получаем непростое число n = "</span> + n + <span class="strcolor">", делящееся без остатка нв "</span> + j + <span class="strcolor">". Утверждение неверно!"</span>);
				<b>return</b>;
			}
		}
		s += n + <span class="strcolor">' '</span>;
		<b>if</b> (x % 5 == 0 && x !== 0) {
			s += <span class="strcolor">'\n'</span>;
		}
	}
	<u>writeln</u>(s);
}
</pre>
<p>Итак, что здесь происходит. Я использовал цикл <b>for</b>. Если вы внимательно прочтете подсказку к этому ключевому слову, вы поймете что тело цикла будет выполнено 41 раз, при этом переменная i будет принимать значения от 0 до 40.</p>
<p>Новички могут пойматься, записав определение цикла <b>for</b> (x; x < 40; x = x + 1) </p>
<p>В этом случае действительно все полученные числа будут простыми, вот только не выполнится условие из текста задачи: икс должен изменяться от 0 до 40, включая 0 и 40. А при x = 40 мы получаем по данной в задаче формуле число, которое делится на 41 без остатка.</p>
<p>Посмотрим подробнее, как я проверяю, что число простое или не простое. Самый простой способ - это попробовать разделить полученное по формуле число n на все значения от 2 (на единицу простое число делится без остатка) до n, не включая n, так как на само себя простое число делится также без остатка. 
Я делаю это во втором цикле. Вы можете видеть, что в нем я использую для увеличения j конструкцию j++, в то время как в первом (внешнем) цикле я использую x = x + 1. При использовании в цикле эти конструкции по смыслу вполне эквивалентны. j++ увеличивает значение переменной j на единицу всякий раз после того, как тело цикла выполнено. Одно такое выполнение тела цикла называется <b class="tblack">итерацией</b>.</p>
<p>В каждой итерации внутреннего цикла я делю полученное во внешнем цикле число n на j, после чего передаю результат методу объекта Math.floor. Этот метод отбрасывает дробную часть, если она есть. Сравнив результат его работы с частным n / j я могу понять, делилось n  на j без остатка или нет.
Если этот так, значит я вывожу сообщение и завершаю работу программы, используя оператор <b>return</b>.</p>
<p>Иначе я продолжаю собирать полученные значения n в строку s, ведь мне надо вывести все простые числа если утверждение истинно.</p>
<p>Через каждые пять итераций я добавляю символ новой строки \n, чтобы вывести эти числа компактно: восемь строк по пять цифр. Вы можете это видеть, если временно измените условный оператор внешнего цикла с <= на <. 
Для отсчета этих пяти итераций я использую операцию получения остатка от целочисленного деления %. Например, 12 % 10 равно двум (частное 1, остаток 2)</p>
<h4>Использование while </h4>
<p>В предыдущем примере вполне можно было бы использовать while вместо for. Внешний цикл выглядел бы тогда: 
<pre><b>while</b>(x <= 40) {
	//...
	x++;
}</pre>
а суть осталось той же. То же касается и внутреннего цикла. Я буду использовать while в следующем примере.
</p>
<p>Вычислить</p>
<?=QuickStartHandler::tim(24, 3, 2) ?>
<p>при a не равном 1</p>
<pre>
<b>function</b> endingSum() {
	<b>var</b> a = <i>parseInt</i>( <u>readln</u>(<span class="strcolor">'Введите a'</span>) ),
		sum = 1 / a, n = 2, prevSum = sum;
	<b>if</b>(<i>isNaN</i>(a) || a == 1 ) {<span class="strcolor">//если a не число или равен 1
</span>		<u>writeln</u>(<span class="strcolor">'a должно быть числом не равным 1!'</span>);
		<b>return</b>;
	}
	<b>while</b> (true) {
		sum += 1/Math.<i>pow</i>(a, 2*n - 2);
		n++;
		<b>if</b> (sum == prevSum) {
			<b>break</b>;
		}
		prevSum = sum;
	}
	<u>writeln</u>(sum);
}
</pre>
<p></p>
<div style="width:96%">
<div class="left"><a href="<?=WEB_ROOT?>/quick_start/arithmetic">Назад - <?=$lang['arithmetic']?></a></div>
<div class="right"><a href="<?=WEB_ROOT?>/quick_start/cycles">Далее - <?=$lang['cycles']?></a></div>
<div class="clearfix"></div>
</div>
