<header>
	<h3>Ключевые слова языка.</h3>
</header>
<p>Когда я начинал учиться программировать, меня часто раздражал в учебниках один факт: 
ближе к началу были приведены ключевые слова языка программирования, но они давались "без перевода", при том, 
что если некоторые я мог перевести буквально, другие были сокращениями от неизвестных мне слов. Это раздражало.</p>
<p>Здесь я попытаюсь избавиться от такого недоразумения.</p>
<p>Ниже перечисленны ключевые слова JavaScript (не все, а только те, которые я использую в повседневной практике).
 Наводя на слово курсор (указатель) мыши вы можете прочесть во всплывающей подсказке, как используется это ключевое слово.
</p>
<p>Но сначала давайте разберемся, что такое вообще ключевые слова языка программирования.
Это прежде всего слова, <b><i class="tblack">которые нельзя использовать для именования функций</i></b> (пример функции JavaScript вы уже видели на предыдущей странице и мы еще к функциям вернемся) и 
<b><i class="tblack">переменных</i></b> (что это за зверь разберемся далее).</p>
<p>Это связанно с тем, что каждое ключевое слово языка интерпретируется интерпретатором языка совершенно определенным образом. Таких слов чаще всего вообще не много, а я к томуже как сказал выше приведу только те из них, которые использую часто, то есть те, которые смогу вспомнить прямо сейчас.</p>
<p>У меня было небольшое колебание, валить ли в одну кучу собственно ключевые слова языка JavaScript  и 
слова определяющие в нем типы данных, решил валить, так как они соответствуют данному мною же определению</p>
<p>
	<pre>
<b title="Определяет тип данных (объект типа) массив.

var array = new Array(); //новый пустой массив

Простейшим примером массива может быть последовательность чисел:
var other_massiff = [0,1,2,3,4,5,6,7];//так тоже можно создавать массивы, только имя переменной дурацкое, я использовал его только для того, чтобы показать что необязательно использовать слово array в имени переменной

var third_array = [];// и даже так, и это более предпочтительно, чем первый метод, потому что меньше букв
">Array</b>  <b title='Буквально "хватать".
Используется совместно с try  и finally, например:
try {
	//здесь код, который может создать ошибку интерпретации
} catch(error) {
	//Здесь делаем что-то, чтобы дать понять что так делать не надо, например
	alert("У вас в коде ошибка: " + error.message + " исправьте ее");
} finally {
	//А здесь делаем что-то, что должно быть сделано независимо от того, была ошибка или нет
}

Обычно этот кусок кода сложно понять начинающим, я хочу вернутся к нему при более подробном расмотрении функций.
'>catch</b>  <b title='Буквально "делать".
Используется совместно с  while, например:

do {
	alert("Ха-Ха");
} while (1 == 0);//выполнять тело цикла пока единица равна нулю. Так как равенство в скобках ложно, сообщение будет выведено только один раз.

Можно сказать, что в примере написано "Делать алерт, пока единица равна нулю."
'>do</b> <b title='Определяет тип данных (объект типа) ошибка.

var error = new Error(); //новая ошибка, но так обычно никто не делает.
error.message = "Ожидался ;, найден:";

Более жизненный пример, где нибудь в дебрях кода:

throw new Error("Ждали денег, пришел счет!");
Ваш коллега сможет поймать и обработать эту ошибку, наведите курсор на catch чтобы увидеть как.
'>Error</b>  <b title='Буквально "иначе".

Используется вместе с if, например:

if (sum >= 5.2) {
	//... тут списали со счета
	alert("Покупка оплачена");
} else {
	alert("На вашем счете не хватает средств.");
}
'>else</b>  <b title='Определяет тип данных (объект типа) функция.

var F = new Function(); //новая функция, но так обычно никто не делает.

Более жизненный пример, где нибудь в дебрях кода:

if (f instanceof Function) {//если f - это функция
	f(); //вызвать ее.
}
'>Function</b>  <b title='Буквально "ложь". Значение, получающееся в результате операций сравнения (>, <. ==, ===, !=):

alert(1 == 0); //Выведет false потому что единица не равна нулю

Это значение может быть присвоено переменной:

var x = false;
alert(x);//Выведет false
'>false</b>   <b title='Буквально "для". Один из способов определить (описать) цикл в программе, например:

//выводим пять раз слово "ура!"
for (var i = 0; i < 5; i++) {//начало тела цикла
	alert("ура!, это \"раз\" номер " + (i + 1));
}//конец тела цикла

for (var i = 0; i < 5; i++) можно понимать как "Для переменной i, меньшей пяти выполнять код в теле цикла и увеличивать ее на единицу".

То есть, мы могли бы записать и так:

var i = 0;//присвоить переменной значение 0
for (i; i < 5; i++) { //для i меньшей 5 выполнять тело цикла и увеличивать ее после этого на единицу
	//...
}
результат был бы тот же.
См. также подсказку на слове in
'>for</b>  <b title='Определяет функцию. Пример:

function myFunction(argument_1, argument_2) {
	//код расположенный здесь можно использовать в программе снова и снова
}
Аргументов функции может быть сколько угодно, может и не быть, все зависит от целей, для которых мы ее определяем.

Функция может быть анонимной (не иметь имени)

function () {} //вполне нормальное определение

Такие функции обычно используют как обработчики наступления каких-то событий, например

//раз в пять секунд писать "прошло пять секунд...", через час прекратить
var count = 0, intervalHandle = setInterval(
	function () {
		writeln("прошло пять секунд...");
		count++;
		if (count > 720) {
			clearInterval(intervalHandle);
		}
	}, 
	5*1000
);
'>function</b>  <b title='Буквально "если".

Можно навести курсор мыши на else и прочесть о нем там.
"Имейте только ввиду, что if может использоваться без else, а else без if - нет"  &copy; капитан Очевидность.
'>if</b>  <b title='Буквально "в". Используется вместе с for

Один из способов организовать цикл. На практике обычно используется для обхода "простого" объекта (см. подсказку к слову Object).

Например, код
var obj = {type:"Посуда", name:"Тарелка", price:400}

for (var i in obj) {
	alert( "i = \"" + i + "\", obj[i] = \"" + obj[i] + "\"");
}

выведет:
"type" = "Посуда"
"name" = "Тарелка"
"price" = "400"
'>in</b>  <b title='Буквально "Бесконечность". Используется для обозначения бесконечно большого числа.

Например код

var i = 1;
i = i << 30; //получаем довольно большое число, про операцию << будет дальше
i = Math.pow(i,i);//возводим это большое число в степень равную ему самому.
alert(i);//выведет Infinity
'>Infinity</b>

<b title='Специальный объект языка. В нем собраны математические функции, такие как синус, косинус, округление и прочие.
Пример использования:
alert(Math.sin(Math.PI * 30 / 180));// выведет... почти верное значение синуса 30 градусов.
'>Math</b>  <b title='Not a Number - специальное значение, которое может принять объект типа Number
Например, попытаемся получить число из тарелки
var n = new Number("Тарелка");
alert(n); //выведет NaN

//Особенность значения в том, что с ним нельзя сравнивать "обычно".
alert(n == NaN); //выведет false

//Для проверки, NaN объект или не NaN сипользуйте стандартную функцию isNaN
alert(isNaN(n)); //выведет true
'>NaN</b>  <b title='Определяет тип данных (объект типа) число. Например

var n = new Number(10);//Создали объект типа Number но так никто не делает. Все делают var n = 10;
alert(10);//выведет 10
'>Number</b>  <b title='Буквально "новый". Пришло скорее всего из C++ где означало команду выделить новый участок памяти ;-).
Может использоваться при создании переменной типа Object, String, Number, Array, Function, но для стандартных типов объектов есть более лаконичные варианты.
Например:
var arr = []; /*эквивалентно*/ var arr = new Array();
var obj = {}; /*эквивалентно*/ var obj = new Object();
var str = ""; /*эквивалентно*/ var str = new String();
var num = 0; /*эквивалентно*/ var num = new Number(0);

на практике new чаще используется только для создания объектов типов, определенных программистом, например:

//Создадим (определим) тип объекта "Сфера"
function Sphere(x, y, z, r) {//три координаты центра и радиус
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
}
Создадим два объекта типа сфера:
var sphere_1 = new Sphere(1, 2, 3, 4),
	sphere_2 = new Sphere(5, 6, 7, 8);
alert(sphere_1.x);
alert(sphere_2.x);

'>new</b>  <b title='Буквально "ноль". Но это не ноль! 
Это значение используется как "Вообще ничего".
В программировании ноль - это вполне конкретное значение.
Поэтому код

alert(0 === null);

выведет false (ложь).

'>null</b>  <b title='Определяет тип данных (объект типа) Простой объект. Простыми объектами удобно описывать реальные и 
абстрактные сущности или предметы.

Например
var sphere = new Object();//Создали простой объект, который будет описывать сферу в пространстве. 
//Сфера характеризуется координатами центра и радиусом.
sphere.x = 5;
sphere.y = 0;
sphere.z = 10;
sphere.r = 2;
//Теперь наш объект описывает сферу. x, y, z, r называются полями или свойствами объекта.

Однако, так никто не делает. Пишут более коротко:

var sphere = {x:5, y:0, z:10, r:2}; //C тем же результатом.

//Кроме простых значений, значениями свойств объекта могут быть функции. Например:
sphere.isIntersect = function(sphere2) {
	//здеcь может быть код, проверяющий, пересекаются ли поверхности сферы sphere2  и сферы для которой вызван метод isIntersect
	//Получить значения "собственных" свойств можно используя слово this
	alert(this.x);
}
sphere.isIntersect(sphere);//Выведет 5

'>Object</b>  <b title='Буквально "прототип". Свойство, которое есть у любой функции JavaScript.

Используется для реализации наследования. Например (сначала прочтите подсказку для ключевого слова Object),у нас в программе должно быть много объектов-сфер.
Чтобы не определять функцию isIntersect для каждого объекта сферы мы можем слегка изменить код из подсказки про Object.

var Sphere = function(x, y, z, r) { //Здесь создали новый тип объекта, Sphere
		this.x = x; //Эта и следующие строки, чтобы он вел себя как простые объекты из подсказки про объекты
		this.y = y;
		this.z = z;
		this.r = r;
	}
	Sphere.prototype.isIntersect = function(sphere2) { //а метод (функцию) добавим прототипу объекта Sphere
	//здеcь может быть код, проверяющий, пересекаются ли поверхности сферы sphere2  и сферы для которой вызван метод isIntersect
	//Получить значения "собственных" свойств можно используя слово this
	alert(this.x);
}

var sphere = new Sphere(5, 0, 10, 2);
var sphere2 = new Sphere(7, 0, 10, 2);

sphere.isIntersect();//Выведет 5
sphere2.isIntersect();//Выведет 7

'>prototype</b>  <b title='Определяет тип данных (объект типа) строка. Например:

var s = new String("Что это такое"); //Создали новую переменную типа "объект строка",но так никто не делает, 

var s = "Что это такое";  //дает тот же эффект
'>String</b>  <b title='Буквально "Неопределено". Специальное значение, которому равна любая переменная, которой не присвоено значение. Например

var x;
alert(x); //Выведет undefined

Также как и NaN это значение нельзя присвоить, и с ним нельзя сравнить. Однако, стандарной функции подобной isNaN не предусмотрено.
'>undefined</b>  <b title='Сокращение от variable - переменная. ПРимер:

var x, y = 102; //Объявили переменные x и y, y определили - присвоили ей значение 10
alert(x); //Выведет  undefined (неопределено)
alert(y); //Выведет 102

Хотя вы можете "обнаружить", что объявление 

x, y = 10;

ведет себя точно также, лучше возьмите себе за правило всегда объявлять переменные используя слово var.

Это сэкономит нервных клеток вам и вашим коллегам. '>var</b>  <b title='Буквально "с". От этого слова JavaScript скоро избавится, оно уже недоступно в use strict mode. Однако "не в use strict mode" на мой взгляд лет пять у нас точно есть ;-).
Используется для упрощения доступа к полям или свойствам объекта (см. подсказку для Object).

Пример использования:

var obj = {z:1, x:5};
with (obj) {
	alert(z);//Выведет 1
	alert(x);//Выведет 5
}
'>with</b>  <b title='Буквально "пока". Один из способов определить (описать) цикл. Например
var i = 0;
while (i < 5) { //Пока  i меньше пяти
	alert(i);
}
'>while</b>
	</pre>
</p>
<div style="width:96%">
<div class="left"><a href="<?=WEB_ROOT?>/quick_start/wtf">Назад - <?=$lang['wtf']?></a></div>
<div class="right"><a href="<?=WEB_ROOT?>/quick_start/keywords">Далее - <?=$lang['keywords']?></a></div>
<div class="clearfix"></div>
</div>
</p>
