<header>
	<h3>Арифметические операции</h3>
</header>
<h4>Простые вычисления</h4>
<p>Вычислить</p>
<p><?=QuickStartHandler::tim(24, 1, 1)?></p>
<p>Здесь все просто, вспоминаем про приоритеты математических операций, в любом компиляторе или интерпретаторе они точно такие же.
То есть деление и умножение выполняются раньше сложения и вычитания. Скобки имеют наивысший приоритет.
Значит, пишем
<pre>
	<b>function</b> example_1() {
		<b>var</b> x = <u>readln</u>('Введите x'),
			y = <u>readln</u>('Введите y');
		<b>var</b> result = ( (x + y) / (x*x - x*y) ) - ( (3*x + y) / (y*y - x*x) );
		<u>writeln</u>('Результат: ' + result);
	}
</pre>
</p>
<p>Проверив для x = 12 и y = 45 мы можем убедиться, что: </p>
<p>12 + 45 = 57</p>
<p>144 - 540 = -396</p>
		
<p>36 + 45 = 81</p>
<p>2025 - 144 = 1881</p>
		
<p>57/-396=−0,143939394</p>
<p>81/1881=0,043062201</p>
<p>−0,143939394 - 0,043062201 = −0,187001595</p>
<p>Что полностью соответствует выводу приложения в "псевдоокне". Однако, успокаиваться рано.</p>
<p>Запустим пример и введем в качестве x и y единицы. Результат будет не очень хороший: мы ожидаем получить какое-то числовое значение, но мы видем в выводе: <pre><b>NaN</b></pre></p>
<p>Происходит это потому, что я совершенно не учел в примере, что в результате вычисления выражений в знаменателе может получиться 0.</p>
<div class="ainfo">Например в  C/C++ или Pascal, при такой ситуации возникла бы ошибка при выполнении программы - там деление на 0 это невозможно. Но в JavaScript в таком случае получается специальное значние "Бесконечность" - Infinity. Однако, вычесть из одной бесконечности другую мы не можем, в результате у нас получается другое специальное значение: NaN - "не число". </div>
<p>Добавлю контроль того, что получается в знаменателе, а заодно и контроль вводимых значений:
<pre>
	<b>function</b> example_1() {
		<b title='Denominator - знаменатель, говорит гугл транслятор'>var</b> x = <i title='Стандартная функция, приводит свой аргумент к целому числу'>parseInt</i>( <u>readln</u>('Введите x') ),
			y = <i title='Стандартная функция, приводит свой аргумент к дробному числу'>parseFloat</i>( <u>readln</u>('Введите y') ),
			denominator_1 = x*x - x*y,
			denominator_2 = y*y - x*x;
			<b>if</b>(<i title='не число?'>isNaN</i>(x) || <i title='не число?'>isNaN</i>(y) ) {//если x не число или y не число
				<u>writeln</u>('x и y должны быть числами!');
				<b>return</b>;
			}
			<b>if</b>(!denominator_1 || !denominator_2 ) {
				<u>writeln</u>('Деление на 0! Аварийный выход.');
				<b>return</b>;
			}
		<b>var</b> result = ( (x + y) / denominator_1 ) - ( (3*x + y) / denominator_2 );
		<u>writeln</u>('Результат: ' + result);
	}
</pre></p>
<p>Я привожу х к целому числу, y к дробному. Если бы пришлось писать подобную функцию на практике я бы скорее всего привел к дробному в обоих случаях. Но у меня появился шанс рассказать о стандартной функции parseInt  и я не стал его упускать.
Эта функция берет свой аргумент и пытается опознать в нем целое число.
Самостоятельно добавьте в текст программки несколько строк вида  <pre><u>writeln</u>('value = ' + <i>parseInt</i>(a));</pre>
</p>
<p>вместо a используйте различные строковые значения (строковые константы), например 
'123adsafdads', 'dsadss1123', 'a5'. </p>
<p>parseInt может принимать второй аргумент. Он указывает основание системы счисления, например <pre><i>parseInt</i>('a5', 16);</pre> вернет число, в отличии от parseInt('a5'). Потому что а в шестнадцатиричной системе счисления вполне допустимая цифра, а если не передавать второй аргумент, parseInt пытается работать в десятиричной.</p>
<p>parseFloat - это почти та же история. Только она пытается получить дробное число из строки. Для отделения целой части числа от дробной в программироании используется точка. </p>
<p>isNaN - смотрите подсказку к <pre><b>NaN</b></pre></p>
<p>Две прямых линии - оператор алгебры логики "Или" </p>
<h4>Вычисления с использованием математических функций</h4>
<p>Вычислить</p>
<p><?=QuickStartHandler::tim(24, 1, 2)?></p>
<p>Пример мало чем отличается от предыдущего, однако тут появилась функция косинуса угла. Также, нам понадобится вычислить квадратный корень. </p>
<div style="width:96%">
<div class="left"><a href="<?=WEB_ROOT?>/quick_start/datatypes">Назад - <?=$lang['datatypes']?></a></div>
<div class="right"><a href="<?=WEB_ROOT?>/quick_start/exception">Далее - <?=$lang['exception_st']?></a></div>
<div class="clearfix"></div>
</div>
