<header>
	<h3>Типы данных.</h3>
</header>
<p>Ранее я упомянул, что переменные могут содержать не только числа.</p>
<p>Я собирался описать тут типы данных, но заметил что я скатываюсь к попытке написать еще один учебник по JavaScript, а я не собирался изначально этого делать.</p>
<p>Поэтому я лучше дам тут еще раз ссылку на <a href="http://learn.javascript.ru/variables" target="_blank">learn.javascript.ru</a>, а заодно и на <a href="http://javascript.ru/manual" target="_blank">справочник</a> размещенный на этом сайте.</p>
<p>В справочнике вы можете видеть стандартные типы объектов, а пройдя по соотвествующим каждому типу объекта ссылкам в разделе "Стандартные объекты", вы сможете прочесть о том, какие методы есть у этих объектов</p>
<p>Практически это значит, что если мы определили в программе переменную какого-то типа, мы можем применять методы объекта этого типа к значению этой переменной:</p>
<p>
	<pre>
		<b>function</b> <u title='пример использования метода'>useMethodExample</u>() {
			//создадим переменную типа String и заодно объявим перемнную i
			//которую будем использовать в цикле for
			<b>var</b> s = "Цветет урюк под грохот дней\nДрожит зарей кишлак\nА средь арыков и полей\nИдет гулять ишак.", i;
			<b title='В эту переменную запишется массив созданный методом String.split'>var</b> arr = s.<i title='Разбивает строку на несколько по символу или строке, переданной в качестве аргумента. \n - символ окончания строки'>split</i>("\n");//Использовали метод String.split
			<b>for</b>(i = 0; i < arr.length; i++) {
				<i>alert</i>(arr[i]);
			}
			//У массива тоже есть методы, например
			<b>var</b> q = arr.<i title='Буквально "Вытолкнуть".'>pop</i>();//получить последний элемент массива и удалить его из массива
			s = arr.<i title='Буквально "Соединить".'>join</i>("\n");//соединить элементы массива в строку вставляя символ \n между ними.
			<i>alert</i>(q);
			<i>alert</i>(s);
		}
	</pre>
</p>

<p>Еще на один момент не могу не обратить внимание здесь:</p>
<p>
	<pre>
		<b>function</b> <u title='Пример сравнения'>compareExample</u>() {
			<b>var</b> s = '0', n = 0;
			/*
				Сравнили строку в которой записан 0 с числом 0 - получили true, 
				 потому что операция == сравнивает только значения
			*/
			<i>alert</i>(s == n); 
			<i>alert</i>(s === n); //А тут получили false, так как сравнили и тип данных и значения
		}
	</pre>
</p>
<p>Происходит это потому, что если мы храним в памяти компьютера число 0, там хранится в каком-то байте 0. Но если мы храним строку '0', там хранится число 48.</p>
<p>Сообщать о языке JavaScript вообще и о типах данных в частности что-то еще бессмысленно, учитывая существования моря учебников по языку. Поэтому далее я выполню своё ранее данное в тексте обещание, то есть еще раз вернусь к функциям (вроде ничего более не обещал, если это не так, пишите в комментариях), после чего наконец смогу перейти к решению примеров.</p>
<p></p>
<div style="width:96%">
<div class="left"><a href="<?=WEB_ROOT?>/quick_start/variables">Назад - <?=$lang['variables']?></a></div>
<div class="right"><a href="<?=WEB_ROOT?>/quick_start/functions">Далее - <?=$lang['functions']?></a></div>
<div class="clearfix"></div>
</div>
