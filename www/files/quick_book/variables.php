<header>
	<h3>Переменные</h3>
</header>
<p>Переменные в программировании - это всё. Программист почти никогда не имеет дело с конкретными точными
цифрами. Почти всегда программы, которые вы пишите будут получать данные от других программ или 
просто из внешних источников, таких как базы данных, файлы (в том числе файлы конфигурации), удаленные веб-сервисы.
<p>Переменные в JavaScript <b class="tblack">надо</b> объявлять и определять с помощью ключевого слова <b>var</b>.
Определять пока ещё можно и без него, но я очень постараюсь объяснить сразу, почему так делать не надо.</p>
<p>Но сначала о том, что происходит когда компьютер обрабатывает строку вида <b>var</b> a = 5;</p>
<p>Эта строка (как и любая строка JavaScript кода выполняющегося в браузере) сначала будет скомпилирована в байт-код. Затем байт-код будет отдан интерпретатору.  В результате работы интерпретатора компьютер получит команду "пометить" участок величиной в четыре байта из отданной операционной системой браузеру оперативной памяти именем a и запишет в эти четыре байта значение 5. (Google отказались от генерации байт-кода в своем браузере Chrome, так оно, оказывается, быстрее).</p>
<p>Сложно? На самом деле все еще сложее. Все зависит от того насколько глубоко копнуть.</p>
<p>Но ничего страшного! Если вы ничего не поняли воспользуйтесь определением, данным <a href="http://learn.javascript.ru/variables#%D0%B0%D0%BD%D0%B0%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F-%D0%B8%D0%B7-%D0%B6%D0%B8%D0%B7%D0%BD%D0%B8" target="_blank">здесь</a>
Без тени иронии утверждаю, сравнение переменной с надписанной коробкой  - это прекрасно, лучше вряд ли можно придумать.</p>
<p>Там же вы можете заметить, что переменные могут содержать в себе не только цифры. Но об этом позже.</p>
<p>Так почему же надо использовать слово <b>var</b> при объявлении переменных?</p>
<p>Во-первых следует иметь ввиду, что уже в довольно скором времени объявлять в программе переменные не используя <b>var</b> станет нельзя. 
Чтобы привыкнуть всегда его объявлять, вы можете всегда писать "use strict" первой строчкой в вашей функции. 
Это заставит интерпретатор языка следить, объявили вы переменную используя <b>var</b> или нет.</p>
<p>Во-вторых, читайте дальше внимательно.</p>
<p>
	<pre>
<b>function</b> <u>varExample</u>() {
	<b>var</b> x, y = 102; //Объявили переменные x и y, y определили - то есть присвоили ей значение 102
	<i>alert</i>(x); //Выведет undefined (неопределено)
	<i>alert</i>(y); //Выведет 102
	<i>alert</i>(z); //Ошибка - о переменной z никто ничего не знает!
}
	</pre>
</p>
<p>Сравним с вариантом без <b>var</b>, чтобы избежать в случае с x ошибки, такой же как с z я добавил определение x</p>
<p>
<pre>
<b>function</b> <u>varExample</u>() {
	x = 5, y = 102; //Определили переменные x и y то есть присвоили им значения
	<i>alert</i>(x); //Выведет 5
	<i>alert</i>(y); //Выведет 102
	<i>alert</i>(z); //Ошибка - о переменной z никто ничего не знает!
}
</pre>
</p>
<p>Казалось бы, практически никакой разницы! Мы можем сразу присваивать значения переменных и сэкономить три нажатия на клавиши, не надо писать никакое <b>var</b>!</p>
<p>Но посмотрим дальше. Не знаю к месту ли, но попробую привести такой практический пример.
Например я хочу вывести на веб-странице "псевдоокно" (так я называю здесь "окна", в которых показываются подсказки к ключевым словам) поверх всех других "псевдоокон".
(На самом деле я сейчас обхожусь здесь всегда одним "псевдоокном", но не исключено, что в будущем сделаю несколько.
Например, чтобы можно было открывать подсказки сразу к нескольким ключевым словам.).
</p>
<p>У меня возможно будет функция, определяющая самый "близкий к смотрящему на экран" элемент на экране, точнее на веб-странице. Это свойство элементов веб-страниц задается свойством css z-index.
Я назову свою функцию, которая будет это делать getMaximumZIndexOnPage();</p>
<p>Далее, я хочу вывести свое окно так, чтобы оно не перекрывало другие, если они открыты. Мне нужно как-то определить, в какую точку на экране поместить левый верхний угол окна (в комп. двумерной графике принято использовать левую верхнюю точку как начало координат.), так, чтобы оно перекрыло как можно меньше уже открытых окон.
Я сделаю это в функции getOptimalAppWindowCoordinates();</p>

<p>А теперь вернемся к нашей теме: почему переменные всегда надо писать используя <b>var</b>. В контексте этой темы нас не интересует, что будет внутри функций, о которых я написал выше.
 Но предположим, что внутри определения функции getOptimalAppWindowCoordinates есть строка z = 1 + 1;  и нигде в теле этой функции ранее не встречается такое: <b>var</b> z;</p>
<pre>
<b>function</b> <u>varExample</u>() {
	//Определяю самый "близкий к смотрящему на экран"
	//что внутри этой функции нам сейчас неинтересно
	<b>function</b> <u>getMaximumZIndexOnPage</u>(){ /* ... */ <b>return</b> 100500;}
	<b title="Теперь я знаю, чему должен быть равен z-index нового окна">var</b> z = <u>getMaximumZIndexOnPage</u>() + 1;//Теперь я знаю, чему должен быть равен z-index нового окна
	<b title='но допустим в ней есть такой фрагмент, и переменная z не встречается внутри функции getOptimalAppWindowCoordinates с "приставкой" var'>function</b> <u title="Координаты окна, чтобы перекрыть кaк можно меньше других открытых">getOptimalAppWindowCoordinates</u>() { //Координаты окна, чтобы перекрыть кaк можно меньше других открытых
		//.. что в ней нас сейчас не иинтерсует
		//... но допустим в ней есть такой фрагмент...
		z = 1 + 1;
		//.... тут еще много всего
	}
	<b>var</b> coord = <u title="Координаты окна, чтобы перекрыть кaк можно меньше других открытых">getOptimalAppWindowCoordinates</u>();
	//а теперь я хочу показать окно, но чему равно z?
	<i>alert</i>(z);//Выведет 2, но моя программа ожидала, что тут будет значение полученное с помощью
			//getMaximumZIndexOnPage !
}
</pre>
</p>
<p>Так как я не использовал слово <b>var</b> при определении переменной z внутри тела функции getOptimalAppWindowCoordinates, она (переменная z) определилась как глобальная, то есть доступная вне функции, в которой определена фактически. И если бы я не определил ее сам пятью строками выше, это ни на что бы не повлияло! То есть после выполнения z = 1 + 1; переменная "утекает" в функцию varExample, даже если она там совершенно не нужна!</p>
<p>В нашем конкретном примере эта "утечка" переписала значение нужной переменной, программа не будет работать так, как задумывалось.</p>
<p>А теперь представьте, что у вас в программе сотни функций, множество переменных. Если вы позволяете себе определять внутри этих функций переменные без слова <b>var</b>, то рано или поздно вы столкнетесь с проблемой которую я описал в этом примере. И найти, где именно вы случайно или осознанно определили переменную без <b>var</b> будет не так просто. Еще сложнее будет понять, что дело вообще в этом.</p>
<p>Надеюсь, я понятно изложил.</p>
<?=QuickStartHandler::prevnext('keywords', 'datatypes');?>
